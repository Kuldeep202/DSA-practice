class Solution {
    int sol(vector<vector<int>>& arr, int i, int j, int& r, int& c,
            vector<vector<int>>& dp) {
        if (i > r || j > c)
            return 0;
        if (i == r && j == c)
            return 1;
        int ans = 0;
        if (i + 1 <= r && arr[i + 1][j] != 1) {
            if (dp[i + 1][j] == -1)
                dp[i + 1][j] = sol(arr, i + 1, j, r, c,dp);
            ans = dp[i + 1][j];
        }
        if (j + 1 <= c && arr[i][j + 1] != 1) {
            if (dp[i][j + 1] == -1)
                dp[i][j + 1] = sol(arr, i, j + 1, r, c,dp);
            ans += dp[i][j + 1];
        }
        return ans;
    }

public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r = obstacleGrid.size() - 1;
        int c = obstacleGrid[0].size() - 1;
        if (obstacleGrid[0][0] == 1)
            return 0;
        vector<vector<int>> dp(r + 1, vector<int>(c + 1, -1));
        return sol(obstacleGrid, 0, 0, r, c, dp);
    }
};
