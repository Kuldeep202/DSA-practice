class Solution {
public:
    /*Recursion code---
    int f(int ind,int buy,vector<int>& prices)
    {
        if(ind==prices.size()) return 0;
        if(buy)
        {
            return max(-prices[ind]+f(ind+1,0,prices),
                        0+f(ind+1,1,prices));
        }
        else
        {
            return max(prices[ind]+f(ind+1,1,prices),
                        0+f(ind+1,0,prices));
        }
    }
     int maxProfit(vector<int>& prices) 
    {
        return f(0,1,prices);
    }*/
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        for(int ind=n-1;ind>=0;ind--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy)
                {
                    dp[ind][buy]= max(-prices[ind]+dp[ind+1][0],
                                0+dp[ind+1][1]);
                }
                else
                {
                    dp[ind][buy]= max(prices[ind]+dp[ind+1][1],
                                0+dp[ind+1][0]);
                }
            }
        }
        return dp[0][1];
    }

};
